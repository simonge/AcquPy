import json
import math

inFile = '/home/simong/git/acqu/acqu_user/data_MC12/CB_NaI_RecPol_Sep08_Sergey.dat'
tag = ''

#inFile = '/home/simong/acqu-ROOT6/acqu_user/data.2016.06/Detector-NaI.dat'
#tag = 'New'

fileName = '/home/simong/AcquPy/aux/CrystalBallEnergy'+tag+'.json'


with open(fileName,'w') as outfile:
    f = open(inFile, 'r')

    channel = 0
    data = {}
    data['detector']    = 'CB'
    data['parameter']   = 'Energy'
    data['calEq']       = "return [(float(y['raw'][1]-y['raw'][0]))*y['scale']+y['offset'] for y in x]"
    #data['calEq']      = "return [y['raw'][1]*y['scale']+y['offset'] for y in x]"
    data['channels']   = []
    
    for line in f:
        if('#' in line): continue
        if('Element:' not in line): continue
        columns = line.split()

        datum = {}
        datum['channel']      = channel
        datum['adc']          = int(columns[1].split('M')[0])
        datum['scale']        = float(columns[5])
        datum['offset']       = float(columns[2])
        r     = math.sqrt(float(columns[11])**2+float(columns[12])**2+float(columns[13])**2)
        theta = math.acos(float(columns[13])/r)
        phi   = math.atan2(float(columns[12]),float(columns[11]))
        #datum['position']     = [theta,phi,r]
        datum['position']     = [float(i) for i in columns[11:14]]
        datum['raw']          = []
        datum['value']        = []

        data['channels'].append(datum)
        
        channel    += 1
    
    channel = 0
    f = open(inFile, 'r')
    for line in f:
        if('#' in line): continue
        if('Next-Neighbour:' not in line): continue
        columns = line.split()
        print(line)
        data['channels'][channel]['neighbours'] = [int(i) for i in columns[3:]]

        channel    += 1
        
    print(data)
    json.dump(data, outfile, indent=2)

fileName = '/home/simong/AcquPy/aux/CrystalBallTime'+tag+'.json'

channel = 0

with open(fileName,'w') as outfile:
    
    f = open(inFile, 'r')
    referenceADC = [2000]

    data = {}
    data['detector']    = 'CBTime'
    data['parameter']   = 'Time'
    data['calEq']      = "return ((x['raw']-x['offset']-ref[0])*x['scale'])[0]"
    #data['calEq']      = "return [(y['raw']-y['offset']-ref[int(y['referenceID'])])*y['scale'] for y in x]"
    data['channels']   = []
    data['references'] = []
    
    for line in f:
        if('#' in line): continue
        if('Element:' not in line): continue
        columns = line.split()

        datum = {}
        datum['channel']      = channel
        datum['adc']          = int(columns[6].split('M')[0])
        datum['scale']        = float(columns[10])
        datum['offset']       = float(columns[9])
        datum['referenceID']  = 0
        datum['raw']          = []
        datum['value']        = []

        data['channels'].append(datum)
        
        channel    += 1

    for ref in referenceADC:
        datum = {}
        datum['adc'] = int(ref)
        datum['raw'] = []
        data['references'].append(datum)
    

    print(data)
    json.dump(data, outfile, indent=2)
